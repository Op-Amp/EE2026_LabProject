`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// AY1718 Sem 1 EE2020 Project
// Project Name: Audio Effects
// Module Name: AUDIO_FX_TOP
// Team No.: Wednesday Group 06
// Student Names: Gao Qikai, Li Jiawei
// Matric No.: A0177350E, A0177400M
// Description: Top Module, controlling all others
// 
// Work Distribution:
//////////////////////////////////////////////////////////////////////////////////

module AUDIO_FX_TOP(
    input CLK,            // 100MHz FPGA clock
    
    input [7:1] Keyboard, // Musical Keyboard Switches, 1 to 7 for C to B
    input [2:0] SW,       // Mode Selection
    input display_ctrl,   // Display Control (Timer vs Stop Watch)
    input [4:0] btn,      // Push Buttons for Feature controls, RLDUC
    
    output [6:0] seg,     // individual cathodes for LEDs (A to G) of 7 segment display
    output [3:0] an,      // common anodes for LEDs of 7 segment display
    output [7:1] led,     // leds
    output ldsg,          // led signal for mode selection
    
    input  J_MIC3_Pin3,   // PmodMIC3 audio input data (serial)
    output J_MIC3_Pin1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_Pin4,   // PmodMIC3 serial clock (generated by module SPI.v)
     
    output J_DA2_Pin1,    // PmodDA2 sampling clock (generated by module DA2RefComp.vhd)
    output J_DA2_Pin2,    // PmodDA2 Data_A, 12-bit speaker output (generated by module DA2RefComp.vhd)
    output J_DA2_Pin3,    // PmodDA2 Data_B, not used (generated by module DA2RefComp.vhd)
    output J_DA2_Pin4     // PmodDA2 serial clock, 50MHz clock
    );

    //////////////////////////////////////////////////////////////////////////////////
    // Clock Divider Module: Generate necessary clocks from 100MHz FPGA CLK
    // Please create the clock divider module and instantiate it here.
      wire clk_20k;
      wire clk_50M;
      Clock_Generator u0 (CLK, clk_20k, clk_50M);
      
    ///////////////////////////////////////////////////////////////////////////////////
    // Button Input Module: Process the button signal with debouncing
    // Please add the debouncing module and instantiate it here.
       wire [4:0] button;
       genvar i;
       generate for (i = 0; i < 5; i = i + 1) begin
           Debounce u3 (clk_20k, btn[i], button[i]);
       end
       endgenerate
      
      
     //////////////////////////////////////////////////////////////////////////////////
     //SPI Module: Converting serial data into a 12-bit parallel register
     //Do not change the codes in this area
       wire [11:0]MIC_in;
       SPI u1 (CLK, clk_20k, J_MIC3_Pin3, J_MIC3_Pin1, J_MIC3_Pin4, MIC_in);
   
    /////////////////////////////////////////////////////////////////////////////////////
    // Real-time Audio Effect Features
    // Please create modules to implement different features and instantiate them here   
      wire [11:0] speaker_out;
      wire [11:0] delayed;
      wire [11:0] instrumental;
      wire [11:0] recorded;
      wire start_play;
      wire recording;
      
      Delay f1 (clk_20k, MIC_in, delayed);
      Record f3 (CLK, clk_20k, MIC_in, button[0], button[3], recorded, start_play, recording);
      Music_Instrument f2 (CLK, button[0], Keyboard, SW[2], instrumental, led[7:1]);
      assign speaker_out = SW[2] ? instrumental                    // 1XX for instrumental
                                 : SW[1] ? recorded                // 01X for recorded and pitch shifted
                                         : SW[0] ? delayed         // 001 for delayed
                                                 : MIC_in;         // 000 for original


    //////////////////////////////////////////////////////////////////////////////////
    // 7 Segment display feature as the supplement of audio features 
    // Please implement some extra feature(s) and instantiate the related modules here.
      wire [15:0] display;
      Calculate_Display f4 (CLK, clk_20k, SW, display_ctrl, button[1], button[2], button[3], button[4], button[0], Keyboard, start_play, recording, display, ldsg);
      Seven_Seg_Display u4 (clk_20k, display, seg, an);

                                         
    /////////////////////////////////////////////////////////////////////////////////////
    //DAC Module: Digital-to-Analog Conversion
    //Do not change the codes in this area        
      DA2RefComp u2(clk_50M, clk_20k, speaker_out, ,1'b0, J_DA2_Pin2, J_DA2_Pin3, J_DA2_Pin4, J_DA2_Pin1,);
        
  //////////////////////////////////////////////////////////////////////////////////

endmodule
